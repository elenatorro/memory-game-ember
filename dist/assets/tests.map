{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","memory-game/tests/adapters/application.jshint.js","memory-game/tests/app.jshint.js","memory-game/tests/constants/api.jshint.js","memory-game/tests/constants/cards.jshint.js","memory-game/tests/constants/game-cards.jshint.js","memory-game/tests/constants/game.jshint.js","memory-game/tests/constants/locales.jshint.js","memory-game/tests/constants/store.jshint.js","memory-game/tests/helpers/destroy-app.js","memory-game/tests/helpers/destroy-app.jshint.js","memory-game/tests/helpers/ember-i18n/test-helpers.js","memory-game/tests/helpers/module-for-acceptance.js","memory-game/tests/helpers/module-for-acceptance.jshint.js","memory-game/tests/helpers/resolver.js","memory-game/tests/helpers/resolver.jshint.js","memory-game/tests/helpers/setup-games.js","memory-game/tests/helpers/setup-games.jshint.js","memory-game/tests/helpers/start-app.js","memory-game/tests/helpers/start-app.jshint.js","memory-game/tests/helpers/store.js","memory-game/tests/helpers/store.jshint.js","memory-game/tests/initializers/array.jshint.js","memory-game/tests/integration/components/change-locale-test.js","memory-game/tests/integration/components/change-locale-test.jshint.js","memory-game/tests/integration/components/game-board-test.js","memory-game/tests/integration/components/game-board-test.jshint.js","memory-game/tests/integration/components/game-card-test.js","memory-game/tests/integration/components/game-card-test.jshint.js","memory-game/tests/integration/components/level-name-test.js","memory-game/tests/integration/components/level-name-test.jshint.js","memory-game/tests/locales/en/translations.jshint.js","memory-game/tests/locales/es/translations.jshint.js","memory-game/tests/models/card.jshint.js","memory-game/tests/models/game-card.jshint.js","memory-game/tests/models/game.jshint.js","memory-game/tests/pods/application/route.jshint.js","memory-game/tests/pods/components/change-locale/component.jshint.js","memory-game/tests/pods/components/game-board/component.jshint.js","memory-game/tests/pods/components/game-card/component.jshint.js","memory-game/tests/pods/components/level-name/component.jshint.js","memory-game/tests/pods/components/nav-sidebar/component.jshint.js","memory-game/tests/pods/game/level/route.jshint.js","memory-game/tests/pods/game/start/route.jshint.js","memory-game/tests/resolver.jshint.js","memory-game/tests/router.jshint.js","memory-game/tests/test-helper.js","memory-game/tests/test-helper.jshint.js","memory-game/tests/transforms/object.jshint.js","memory-game/tests/unit/components/change-locale-test.js","memory-game/tests/unit/components/change-locale-test.jshint.js","memory-game/tests/unit/components/game-board-test.js","memory-game/tests/unit/components/game-board-test.jshint.js","memory-game/tests/unit/components/game-card-test.js","memory-game/tests/unit/components/game-card-test.jshint.js","memory-game/tests/unit/components/level-name-test.js","memory-game/tests/unit/components/level-name-test.jshint.js","memory-game/tests/unit/components/nav-sidebar-test.js","memory-game/tests/unit/components/nav-sidebar-test.jshint.js","memory-game/tests/unit/components/nav-sidebar-toggle-test.js","memory-game/tests/unit/components/nav-sidebar-toggle-test.jshint.js","memory-game/tests/unit/models/card-test.js","memory-game/tests/unit/models/card-test.jshint.js","memory-game/tests/unit/models/game-card-test.js","memory-game/tests/unit/models/game-card-test.jshint.js","memory-game/tests/unit/models/game-test.js","memory-game/tests/unit/models/game-test.jshint.js","memory-game/tests/unit/routes/application-test.js","memory-game/tests/unit/routes/application-test.jshint.js","memory-game/tests/unit/routes/game-level-test.js","memory-game/tests/unit/routes/game-level-test.jshint.js","memory-game/tests/unit/routes/game-start-test.js","memory-game/tests/unit/routes/game-start-test.jshint.js","memory-game/tests/unit/services/api-test.js","memory-game/tests/unit/services/api-test.jshint.js","memory-game/tests/unit/services/card-test.js","memory-game/tests/unit/services/card-test.jshint.js","memory-game/tests/unit/services/route-test.js","memory-game/tests/unit/services/route-test.jshint.js","memory-game/tests/unit/services/store-test.js","memory-game/tests/unit/services/store-test.jshint.js","memory-game/tests/unit/utils/utils.js","memory-game/tests/unit/utils/utils.jshint.js","memory-game/tests/utils/utils.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('memory-game/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('memory-game/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('memory-game/tests/constants/api.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | constants/api.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/api.js should pass jshint.');\n  });\n});","define('memory-game/tests/constants/cards.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | constants/cards.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/cards.js should pass jshint.');\n  });\n});","define('memory-game/tests/constants/game-cards.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | constants/game-cards.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/game-cards.js should pass jshint.');\n  });\n});","define('memory-game/tests/constants/game.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | constants/game.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/game.js should pass jshint.');\n  });\n});","define('memory-game/tests/constants/locales.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | constants/locales.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/locales.js should pass jshint.');\n  });\n});","define('memory-game/tests/constants/store.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | constants/store.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/store.js should pass jshint.');\n  });\n});","define('memory-game/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('memory-game/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('memory-game/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('memory-game/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'memory-game/tests/helpers/start-app', 'memory-game/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _memoryGameTestsHelpersStartApp, _memoryGameTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _memoryGameTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _memoryGameTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('memory-game/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('memory-game/tests/helpers/resolver', ['exports', 'memory-game/resolver', 'memory-game/config/environment'], function (exports, _memoryGameResolver, _memoryGameConfigEnvironment) {\n\n  var resolver = _memoryGameResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _memoryGameConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _memoryGameConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('memory-game/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('memory-game/tests/helpers/setup-games', ['exports', 'memory-game/services/store', 'memory-game/services/card', 'ember-i18n/helper'], function (exports, _memoryGameServicesStore, _memoryGameServicesCard, _emberI18nHelper) {\n\n  function setupGames(appInstance) {\n    try {\n      appInstance.registry.register('service:store', _memoryGameServicesStore['default'], { instantiate: true });\n      appInstance.container.registry.injection('route:application', 'storeService', 'service:store');\n      appInstance.container.lookup('service:store');\n\n      appInstance.registry.register('service:card', _memoryGameServicesCard['default'], { instantiate: true });\n      appInstance.container.registry.injection('route:application', 'cardService', 'service:card');\n      appInstance.container.lookup('service:card');\n\n      appInstance.container.lookup('service:i18n').set('locale', 'en');\n      appInstance.registry.register('helper:t', _emberI18nHelper['default']);\n    } catch (reason) {\n      console.warn({ reason: reason });\n    }\n  }\n\n  exports['default'] = setupGames;\n});","define('memory-game/tests/helpers/setup-games.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/setup-games.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/setup-games.js should pass jshint.');\n  });\n});","define('memory-game/tests/helpers/start-app', ['exports', 'ember', 'memory-game/app', 'memory-game/config/environment'], function (exports, _ember, _memoryGameApp, _memoryGameConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _memoryGameConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _memoryGameApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('memory-game/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('memory-game/tests/helpers/store', ['exports', 'ember', 'ember-data', 'memory-game/tests/helpers/owner'], function (exports, _ember, _emberData, _memoryGameTestsHelpersOwner) {\n  exports['default'] = setupStore;\n  exports.createStore = createStore;\n\n  function setupStore(options) {\n    var container, registry, owner;\n    var env = {};\n    options = options || {};\n\n    if (_ember['default'].Registry) {\n      registry = env.registry = new _ember['default'].Registry();\n      owner = _memoryGameTestsHelpersOwner['default'].create({\n        __registry__: registry\n      });\n      container = env.container = registry.container({\n        owner: owner\n      });\n      owner.__container__ = container;\n    } else {\n      container = env.container = new _ember['default'].Container();\n      registry = env.registry = container;\n    }\n\n    env.replaceContainerNormalize = function replaceContainerNormalize(fn) {\n      if (env.registry) {\n        env.registry.normalize = fn;\n      } else {\n        env.container.normalize = fn;\n      }\n    };\n\n    var adapter = env.adapter = options.adapter || '-default';\n    delete options.adapter;\n\n    if (typeof adapter !== 'string') {\n      env.registry.register('adapter:-ember-data-test-custom', adapter);\n      adapter = '-ember-data-test-custom';\n    }\n\n    for (var prop in options) {\n      registry.register('model:' + _ember['default'].String.dasherize(prop), options[prop]);\n    }\n\n    registry.register('service:store', _emberData['default'].Store.extend({\n      adapter: adapter\n    }));\n\n    registry.optionsForType('serializer', { singleton: false });\n    registry.optionsForType('adapter', { singleton: false });\n    registry.register('adapter:-default', _emberData['default'].Adapter);\n\n    registry.register('serializer:-default', _emberData['default'].JSONSerializer);\n    registry.register('serializer:-rest', _emberData['default'].RESTSerializer);\n\n    registry.register('adapter:-rest', _emberData['default'].RESTAdapter);\n\n    registry.register('adapter:-json-api', _emberData['default'].JSONAPIAdapter);\n    registry.register('serializer:-json-api', _emberData['default'].JSONAPISerializer);\n\n    env.restSerializer = container.lookup('serializer:-rest');\n    env.store = container.lookup('service:store');\n    env.serializer = env.store.serializerFor('-default');\n    env.adapter = env.store.get('defaultAdapter');\n\n    return env;\n  }\n\n  exports.setupStore = setupStore;\n\n  function createStore(options) {\n    return setupStore(options).store;\n  }\n});","define('memory-game/tests/helpers/store.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/store.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/store.js should pass jshint.');\n  });\n});","define('memory-game/tests/initializers/array.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/array.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'initializers/array.js should pass jshint.\\ninitializers/array.js: line 9, col 120, Empty block.\\n\\n1 error');\n  });\n});","define('memory-game/tests/integration/components/change-locale-test', ['exports', 'ember-qunit', 'memory-game/locales/en/translations', 'memory-game/locales/es/translations'], function (exports, _emberQunit, _memoryGameLocalesEnTranslations, _memoryGameLocalesEsTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('change-locale', 'Integration | Component | change-locale', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it should be able to change the locale', function (assert) {\n    var _localesList, _changeToEnglishButton, _changeToSpanishButton;\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 17\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'change-locale', ['loc', [null, [1, 0], [1, 17]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    _localesList = this.$('ul').eq(0);\n    _changeToEnglishButton = this.$('li a').eq(0);\n    _changeToSpanishButton = this.$('li a').eq(1);\n\n    assert.ok(_localesList, 'it should display the locales button list');\n    assert.ok(_changeToEnglishButton, 'it should have a button to switch to English');\n    assert.ok(_changeToSpanishButton, 'it should have a button to switch to Spanish');\n\n    assert.ok(_changeToEnglishButton.text().trim(), _memoryGameLocalesEnTranslations['default'].components.changeLocale.english);\n    assert.ok(_changeToSpanishButton.text().trim(), _memoryGameLocalesEnTranslations['default'].components.changeLocale.spanish);\n\n    _changeToSpanishButton.click();\n\n    assert.ok(_changeToEnglishButton.text().trim(), _memoryGameLocalesEsTranslations['default'].components.changeLocale.english);\n    assert.ok(_changeToSpanishButton.text().trim(), _memoryGameLocalesEsTranslations['default'].components.changeLocale.spanish);\n\n    _changeToEnglishButton.click();\n    assert.ok(_changeToEnglishButton.text().trim(), _memoryGameLocalesEnTranslations['default'].components.changeLocale.english);\n    assert.ok(_changeToSpanishButton.text().trim(), _memoryGameLocalesEnTranslations['default'].components.changeLocale.spanish);\n  });\n});","define('memory-game/tests/integration/components/change-locale-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/change-locale-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/change-locale-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/integration/components/game-board-test', ['exports', 'ember', 'ember-qunit', 'memory-game/constants/game', 'memory-game/tests/helpers/start-app', 'memory-game/tests/helpers/setup-games'], function (exports, _ember, _emberQunit, _memoryGameConstantsGame, _memoryGameTestsHelpersStartApp, _memoryGameTestsHelpersSetupGames) {\n\n  var storeService, cardService, app, appInstance;\n  (0, _emberQunit.moduleForComponent)('game-board', 'Integration | Component | game-board', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      app = (0, _memoryGameTestsHelpersStartApp['default'])();\n      appInstance = app.buildInstance();\n      (0, _memoryGameTestsHelpersSetupGames['default'])(this);\n\n      cardService = this.container.lookup('service:card');\n      storeService = this.container.lookup('service:store');\n\n      cardService.getCards().then(function () {\n        return storeService.initGames();\n      });\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(app, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('it should be able display the different game levels', function (assert) {\n    var _this = this;\n\n    var done, _gameBoard, _gameCards;\n\n    done = assert.async(3);\n\n    _memoryGameConstantsGame.Game.LEVELS.forEach(function (level) {\n      storeService.getGame(level).then(function (game) {\n        _this.setProperties({ game: game });\n        _this.render(_ember['default'].HTMLBars.template((function () {\n          return {\n            meta: {\n              'revision': 'Ember@2.8.2',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 1,\n                  'column': 0\n                },\n                'end': {\n                  'line': 1,\n                  'column': 24\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(1);\n              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n              dom.insertBoundary(fragment, 0);\n              dom.insertBoundary(fragment, null);\n              return morphs;\n            },\n            statements: [['inline', 'game-board', [], ['game', ['subexpr', '@mut', [['get', 'game', ['loc', [null, [1, 18], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 24]]], 0, 0]],\n            locals: [],\n            templates: []\n          };\n        })()));\n\n        _gameBoard = _this.$('.mg-game').eq(0);\n        assert.ok(_gameBoard);\n\n        _gameCards = _this.$('.mg-game-card-flip-container');\n        assert.ok(_gameCards);\n        assert.equal(_gameCards.length, _memoryGameConstantsGame.Game.Level[level].CARDS_NUMBER * 2, 'it should have the level ' + level + ' with ' + _memoryGameConstantsGame.Game.Level[level].CARDS_NUMBER * 2 + ' cards');\n        done();\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('it should be able to set a pair if it is a pair', function (assert) {\n    var _this2 = this;\n\n    var done, gameCards, turnedCard, _gameCards;\n\n    done = assert.async();\n\n    storeService.getGame(_memoryGameConstantsGame.Game.Level.easy.NAME).then(function (game) {\n      gameCards = game.get('gameCards');\n\n      _this2.setProperties({ game: game, turnedCard: turnedCard });\n\n      _this2.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 46\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'game-board', [], ['game', ['subexpr', '@mut', [['get', 'game', ['loc', [null, [1, 18], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0], 'turnedCard', ['subexpr', '@mut', [['get', 'turnedCard', ['loc', [null, [1, 34], [1, 44]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 46]]], 0, 0]],\n          locals: [],\n          templates: []\n        };\n      })()));\n\n      _gameCards = _this2.$('.mg-game-card-flipper');\n\n      assert.notOk(_this2.get('turnedCard'), 'it should not have turned card');\n\n      _gameCards.eq(0).click();\n      assert.ok(_this2.get('turnedCard'), 'it should have saved the turned card');\n      assert.ok(_this2.get('game.gameCards').objectAt(0).get('isTurned'));\n\n      _gameCards.eq(1).click();\n      assert.ok(_this2.get('game.gameCards').objectAt(1).get('isTurned'));\n\n      _ember['default'].run.later(_this2, function () {\n        assert.ok(_this2.get('game.gameCards').objectAt(0).get('isTurned'));\n        assert.ok(_this2.get('game.gameCards').objectAt(1).get('isTurned'));\n        assert.ok(_this2.get('game.gameCards').objectAt(0).get('isPaired'));\n        assert.ok(_this2.get('game.gameCards').objectAt(1).get('isPaired'));\n        done();\n      }, _memoryGameConstantsGame.Game.TURN_ANIMATION_DELAY_MILISECONDS);\n    });\n  });\n\n  (0, _emberQunit.test)('it should be able to reject a pair if it is not a pair', function (assert) {\n    var _this3 = this;\n\n    var done, gameCards, turnedCard, _gameCards;\n\n    done = assert.async();\n\n    storeService.getGame(_memoryGameConstantsGame.Game.Level.easy.NAME).then(function (game) {\n      gameCards = game.get('gameCards');\n\n      _this3.setProperties({ game: game, turnedCard: turnedCard });\n\n      _this3.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 46\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'game-board', [], ['game', ['subexpr', '@mut', [['get', 'game', ['loc', [null, [1, 18], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0], 'turnedCard', ['subexpr', '@mut', [['get', 'turnedCard', ['loc', [null, [1, 34], [1, 44]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 46]]], 0, 0]],\n          locals: [],\n          templates: []\n        };\n      })()));\n\n      _gameCards = _this3.$('.mg-game-card-flipper');\n\n      assert.notOk(_this3.get('turnedCard'), 'it should not have turned card');\n\n      _gameCards.eq(0).click();\n      assert.ok(_this3.get('turnedCard'), 'it should have saved the turned card');\n      assert.ok(_this3.get('game.gameCards').objectAt(0).get('isTurned'));\n\n      _gameCards.eq(2).click();\n      assert.ok(_this3.get('game.gameCards').objectAt(2).get('isTurned'));\n\n      _ember['default'].run.later(_this3, function () {\n        assert.notOk(_this3.get('game.gameCards').objectAt(0).get('isTurned'));\n        assert.notOk(_this3.get('game.gameCards').objectAt(2).get('isTurned'));\n        done();\n      }, _memoryGameConstantsGame.Game.TURN_ANIMATION_DELAY_MILISECONDS);\n    });\n  });\n\n  (0, _emberQunit.test)('it should be able finish a game', function (assert) {\n    var _this4 = this;\n\n    var done, gameCards, turnedCard, _gameCards, cardHasBeenTurned;\n\n    done = assert.async();\n    storeService.getGame(_memoryGameConstantsGame.Game.Level.easy.NAME).then(function (game) {\n      gameCards = game.get('gameCards');\n\n      _this4.setProperties({ game: game, turnedCard: turnedCard, cardHasBeenTurned: cardHasBeenTurned });\n\n      _this4.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 46\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'game-board', [], ['game', ['subexpr', '@mut', [['get', 'game', ['loc', [null, [1, 18], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0], 'turnedCard', ['subexpr', '@mut', [['get', 'turnedCard', ['loc', [null, [1, 34], [1, 44]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 46]]], 0, 0]],\n          locals: [],\n          templates: []\n        };\n      })()));\n\n      _gameCards = _this4.$('.mg-game-card-flipper');\n\n      assert.notOk(_this4.get('turnedCard'), 'it should not have turned card');\n\n      _gameCards.eq(0).click();\n      assert.ok(_this4.get('turnedCard'), 'it should have saved the turned card');\n      assert.ok(_this4.get('game.gameCards').objectAt(0).get('isTurned'));\n\n      _gameCards.eq(1).click();\n      assert.ok(_this4.get('game.gameCards').objectAt(1).get('isTurned'));\n      assert.ok(_this4.get('game.gameCards').objectAt(0).get('isPaired'));\n      assert.ok(_this4.get('game.gameCards').objectAt(1).get('isPaired'));\n\n      _gameCards.eq(2).click();\n      _gameCards.eq(3).click();\n      assert.ok(_this4.get('game.gameCards').objectAt(2).get('isPaired'));\n      assert.ok(_this4.get('game.gameCards').objectAt(3).get('isPaired'));\n      assert.ok(_this4.get('game.isFinished'), 'it should be finished if all the cards are paired');\n      done();\n    });\n  });\n});","define('memory-game/tests/integration/components/game-board-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/game-board-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/game-board-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/integration/components/game-card-test', ['exports', 'ember', 'ember-qunit', 'memory-game/tests/helpers/start-app', 'memory-game/tests/helpers/setup-games', 'memory-game/constants/store', 'memory-game/constants/game', 'memory-game/constants/cards', 'memory-game/locales/en/translations', 'memory-game/locales/es/translations'], function (exports, _ember, _emberQunit, _memoryGameTestsHelpersStartApp, _memoryGameTestsHelpersSetupGames, _memoryGameConstantsStore, _memoryGameConstantsGame, _memoryGameConstantsCards, _memoryGameLocalesEnTranslations, _memoryGameLocalesEsTranslations) {\n\n  var storeService, app, appInstance;\n  (0, _emberQunit.moduleForComponent)('game-card', 'Integration | Component | game-card', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      app = (0, _memoryGameTestsHelpersStartApp['default'])();\n      appInstance = app.buildInstance();\n      (0, _memoryGameTestsHelpersSetupGames['default'])(this);\n\n      storeService = this.container.lookup('service:store');\n      storeService.initGames();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(app, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('it should be able display a game card', function (assert) {\n    var _this = this;\n\n    var done, name, game, card, _gameCard, _gameCardBackText, _gameCardFrontText, _gameCardBackImage, _gameCardFrontImage, _changeToSpanishButton;\n\n    done = assert.async();\n    name = 'alpaca';\n\n    _ember['default'].run(function () {\n      game = _memoryGameConstantsGame.Game.LEVELS[0];\n\n      card = _ember['default'].Object.extend({}).create({\n        name: name,\n        meta: {}\n      });\n\n      storeService.setGameCard(game, card);\n      card = storeService.peekAll(_memoryGameConstantsStore.Model.GAME_CARD).objectAt(0);\n\n      _this.setProperties({ card: card });\n      _this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 40\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'game-card', [], ['card', ['subexpr', '@mut', [['get', 'card', ['loc', [null, [1, 17], [1, 21]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 23]]], 0, 0], ['content', 'change-locale', ['loc', [null, [1, 23], [1, 40]]], 0, 0, 0, 0]],\n          locals: [],\n          templates: []\n        };\n      })()));\n\n      _gameCard = _this.$('.mg-game-card-flipper').eq(0);\n      _gameCardBackText = _this.$('.mg-game-card-text').eq(0);\n      _gameCardFrontText = _this.$('.mg-game-card-text').eq(1);\n      _gameCardBackImage = _this.$('.mg-game-card-image img').eq(0);\n      _gameCardFrontImage = _this.$('.mg-game-card-image img').eq(1);\n      _changeToSpanishButton = _this.$('li a').eq(1);\n\n      assert.ok(_gameCard);\n      assert.equal(_gameCardBackText.text().trim(), _memoryGameLocalesEnTranslations['default'].components.gameCard.template.cards[name]);\n      assert.equal(_gameCardFrontText.text().trim(), _memoryGameLocalesEnTranslations['default'].application.title);\n\n      assert.equal(_gameCardBackImage.prop('src'), window.location.origin + '/assets/images/' + name + '.png');\n      assert.equal(_gameCardFrontImage.prop('src'), window.location.origin + '/assets/images/' + _memoryGameConstantsCards.Card.BACK_IMAGE_NAME + '.png');\n\n      _changeToSpanishButton.click();\n      _gameCardBackText = _this.$('.mg-game-card-text').eq(0);\n      _gameCardFrontText = _this.$('.mg-game-card-text').eq(1);\n      assert.equal(_gameCardBackText.text().trim(), _memoryGameLocalesEsTranslations['default'].components.gameCard.template.cards[name]);\n      assert.equal(_gameCardFrontText.text().trim(), _memoryGameLocalesEsTranslations['default'].application.title);\n\n      _gameCard.click();\n      assert.ok(_this.get('card.isTurned'));\n      done();\n    });\n  });\n});","define('memory-game/tests/integration/components/game-card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/game-card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/game-card-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/integration/components/level-name-test', ['exports', 'ember-qunit', 'memory-game/constants/game', 'memory-game/locales/en/translations', 'memory-game/locales/es/translations'], function (exports, _emberQunit, _memoryGameConstantsGame, _memoryGameLocalesEnTranslations, _memoryGameLocalesEsTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('change-locale', 'Integration | Component | change-locale', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it should be able to display the level name', function (assert) {\n    var name, _levelName, _changeToEnglishButton, _changeToSpanishButton;\n\n    name = _memoryGameConstantsGame.Game.LEVELS[0];\n\n    this.setProperties({ name: name });\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 41\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(2);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'change-locale', ['loc', [null, [1, 0], [1, 17]]], 0, 0, 0, 0], ['inline', 'level-name', [], ['name', ['subexpr', '@mut', [['get', 'name', ['loc', [null, [1, 35], [1, 39]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 17], [1, 41]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    _levelName = this.$('span').eq(0);\n    _changeToEnglishButton = this.$('li a').eq(0);\n    _changeToSpanishButton = this.$('li a').eq(1);\n\n    assert.equal(_levelName.text().trim(), _memoryGameLocalesEnTranslations['default'].components.levelName.template[name]);\n    _changeToSpanishButton.click();\n    assert.equal(_levelName.text().trim(), _memoryGameLocalesEsTranslations['default'].components.levelName.template[name]);\n  });\n});","define('memory-game/tests/integration/components/level-name-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/level-name-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/level-name-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/locales/en/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/en/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass jshint.');\n  });\n});","define('memory-game/tests/locales/es/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/es/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es/translations.js should pass jshint.');\n  });\n});","define('memory-game/tests/models/card.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/card.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/card.js should pass jshint.');\n  });\n});","define('memory-game/tests/models/game-card.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/game-card.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/game-card.js should pass jshint.');\n  });\n});","define('memory-game/tests/models/game.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/game.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/game.js should pass jshint.');\n  });\n});","define('memory-game/tests/pods/application/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/application/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/route.js should pass jshint.');\n  });\n});","define('memory-game/tests/pods/components/change-locale/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/change-locale/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/change-locale/component.js should pass jshint.');\n  });\n});","define('memory-game/tests/pods/components/game-board/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/game-board/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/game-board/component.js should pass jshint.');\n  });\n});","define('memory-game/tests/pods/components/game-card/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/game-card/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/game-card/component.js should pass jshint.');\n  });\n});","define('memory-game/tests/pods/components/level-name/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/level-name/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/level-name/component.js should pass jshint.');\n  });\n});","define('memory-game/tests/pods/components/nav-sidebar/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/nav-sidebar/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/nav-sidebar/component.js should pass jshint.');\n  });\n});","define('memory-game/tests/pods/game/level/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/game/level/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/game/level/route.js should pass jshint.');\n  });\n});","define('memory-game/tests/pods/game/start/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/game/start/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/game/start/route.js should pass jshint.');\n  });\n});","define('memory-game/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('memory-game/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('memory-game/tests/test-helper', ['exports', 'memory-game/tests/helpers/resolver', 'ember-qunit'], function (exports, _memoryGameTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_memoryGameTestsHelpersResolver['default']);\n});","define('memory-game/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('memory-game/tests/transforms/object.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/object.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/object.js should pass jshint.');\n  });\n});","define('memory-game/tests/unit/components/change-locale-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('change-locale', 'Unit | Component | change-locale', {\n    needs: ['service:i18n'],\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it should render', function (assert) {\n    var _component = this.subject();\n    assert.ok(_component);\n  });\n});","define('memory-game/tests/unit/components/change-locale-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/change-locale-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/change-locale-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/unit/components/game-board-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('game-board', 'Unit | Component | game-board', {\n    needs: ['component:game-card'],\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it should render', function (assert) {\n    var _component = this.subject();\n    assert.ok(_component);\n  });\n});","define('memory-game/tests/unit/components/game-board-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/game-board-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/game-board-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/components/game-card-test\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/components/game-card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/game-card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/game-card-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/components/level-name-test\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/components/level-name-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/level-name-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/level-name-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/components/nav-sidebar-test\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/components/nav-sidebar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/nav-sidebar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/nav-sidebar-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/components/nav-sidebar-toggle-test\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/components/nav-sidebar-toggle-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/nav-sidebar-toggle-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/nav-sidebar-toggle-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/unit/models/card-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('card', 'Unit | Model | card', {\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it should have a card model', function (assert) {\n    var model = undefined,\n        name = undefined,\n        meta = undefined;\n\n    model = this.subject();\n    name = 'card-name';\n    meta = {};\n\n    _ember['default'].run(function () {\n      model.setProperties({ name: name, meta: meta });\n    });\n\n    assert.equal(model.get('name'), name, 'it should have a correct name attribute');\n    assert.equal(model.get('meta'), meta, 'it should have a correct meta attribute');\n  });\n});","define('memory-game/tests/unit/models/card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/card-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/unit/models/game-card-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('game-card', 'Unit | Model | game', {\n    needs: ['model:game']\n  });\n\n  (0, _emberQunit.test)('it should have a game model', function (assert) {\n    var model = undefined,\n        name = undefined;\n\n    model = this.subject();\n    name = 'card-name';\n\n    _ember['default'].run(function () {\n      model.setProperties({ name: name });\n    });\n\n    assert.equal(model.get('name'), name, 'it should have a correct name attribute');\n  });\n});","define('memory-game/tests/unit/models/game-card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/game-card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/game-card-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/unit/models/game-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('game', 'Unit | Model | game', {\n    needs: ['model:game-card']\n  });\n\n  (0, _emberQunit.test)('it should have a game model', function (assert) {\n    var model = undefined,\n        level = undefined;\n\n    model = this.subject();\n    level = 'game';\n\n    _ember['default'].run(function () {\n      model.setProperties({ level: level });\n    });\n\n    assert.equal(model.get('level'), level, 'it should have a correct level attribute');\n  });\n});","define('memory-game/tests/unit/models/game-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/game-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/game-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/unit/routes/application-test', ['exports', 'ember', 'ember-qunit', 'memory-game/tests/helpers/start-app'], function (exports, _ember, _emberQunit, _memoryGameTestsHelpersStartApp) {\n\n  var App, AppInstance, ApplicationRoute;\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    needs: ['service:route', 'service:store', 'service:api', 'service:i18n'],\n\n    beforeEach: function beforeEach() {\n      App = (0, _memoryGameTestsHelpersStartApp['default'])();\n      AppInstance = App.buildInstance();\n      ApplicationRoute = this.subject();\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(App, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('it should have an application route', function (assert) {\n    assert.ok(ApplicationRoute, 'it should have an application route');\n  });\n});","define('memory-game/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/unit/routes/game-level-test', ['exports', 'ember', 'ember-qunit', 'memory-game/tests/helpers/start-app'], function (exports, _ember, _emberQunit, _memoryGameTestsHelpersStartApp) {\n\n  var App, AppInstance, GameLevelRoute;\n\n  (0, _emberQunit.moduleFor)('route:game.level', 'Unit | Route | game.level', {\n    needs: ['service:route', 'service:store', 'service:api', 'service:i18n'],\n\n    beforeEach: function beforeEach() {\n      App = (0, _memoryGameTestsHelpersStartApp['default'])();\n      AppInstance = App.buildInstance();\n      GameLevelRoute = this.subject();\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(App, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('it should have a game level route', function (assert) {\n    assert.ok(GameLevelRoute, 'it should have a game level route');\n  });\n});","define('memory-game/tests/unit/routes/game-level-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/game-level-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/game-level-test.js should pass jshint.');\n  });\n});","define('memory-game/tests/unit/routes/game-start-test', ['exports', 'ember', 'ember-qunit', 'memory-game/tests/helpers/start-app'], function (exports, _ember, _emberQunit, _memoryGameTestsHelpersStartApp) {\n\n  var App, AppInstance, GameStartRoute;\n\n  (0, _emberQunit.moduleFor)('route:game.start', 'Unit | Route | game.start', {\n    needs: ['service:route', 'service:store', 'service:api', 'service:i18n'],\n\n    beforeEach: function beforeEach() {\n      App = (0, _memoryGameTestsHelpersStartApp['default'])();\n      AppInstance = App.buildInstance();\n      GameStartRoute = this.subject();\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(App, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('it should have a game start route', function (assert) {\n    assert.ok(GameStartRoute, 'it should have a game start route');\n  });\n});","define('memory-game/tests/unit/routes/game-start-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/game-start-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/game-start-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/services/api-test\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/services/api-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/api-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/api-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/services/card-test\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/services/card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/card-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/services/route-test\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/services/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/route-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/services/store-test\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/services/store-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/store-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/store-test.js should pass jshint.');\n  });\n});","define(\"memory-game/tests/unit/utils/utils\", [\"exports\"], function (exports) {});","define('memory-game/tests/unit/utils/utils.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/utils/utils.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/utils.js should pass jshint.');\n  });\n});","define('memory-game/tests/utils/utils.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | utils/utils.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/utils.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('memory-game/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}